# üß© –ó–∞–¥–∞—á–∞: –Ω–∞—Ä—É—à–µ–Ω –ª–∏ KISS?
# –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –∫–æ–¥ backend-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:


# class DeliveryOption:
#     def __init__(self, option):
#         self.option = option

#     def calculate(self, weight):
#         if self.option == "standard":
#             return weight * 1.2 + 5
#         elif self.option == "express":
#             return weight * 2.0 + 10
#         elif self.option == "overnight":
#             return weight * 3.0 + 20
#         else:
#             raise ValueError("Invalid delivery option")


# üí≠ –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º? –ù–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —Ç–∞–∫–∏—Ö "–æ–ø—Ü–∏–π" —Å—Ç–∞–Ω–µ—Ç 10+, –∏–ª–∏ –æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î, –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑ JSON-–∞.


# ‚úÖ –í–æ–ø—Ä–æ—Å 1:
# –ß—Ç–æ —Ç—É—Ç –Ω–∞—Ä—É—à–∞–µ—Ç KISS?
# –ü–æ–ø—Ä–æ–±—É–π —Å–∞–º —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.
# –ï—Å–ª–∏ option –æ–ø—Ü–∏–∏ —Å—Ç–∞–Ω—É—Ç –±–æ–ª—å—à–µ +10 if –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–∑—Ä–∞—Å—Ç—Ä–∞—Ç—å—Å—è —á—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é
# –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞—Ä—É—à–∏—Ç KISS
# üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å—ë –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Ö–Ω—É—Ç–æ –≤ –æ–¥–∏–Ω `if`-–±–ª–æ–∫, —É—Å–ª–æ–∂–Ω—è—è –∫–æ–¥. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–ø—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è `calculate`.
# ‚úÖ –í–æ–ø—Ä–æ—Å 2:
# –ö–∞–∫ –±—ã —Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∞–ª —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É KISS ‚Äî –ø—Ä–æ—Å—Ç–æ, –±–µ–∑ –ø–µ—Ä–µ–≥–∏–±–æ–≤, –Ω–æ –≥–∏–±–∫–æ?
# 2 –ß–∞—Å–∞ –Ω–æ—á–∏ –≤ –≥–æ–ª–æ–≤—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–∞ –º—ã—Å–ª—å sOlid –±—É–∫–≤–∞ O

# from abc import ABC, abstractmethod


# class DeliveryOption(ABC):
#     @abstractmethod
#     def calculate(self, weight): ...


# class StandartDeliveryOption(DeliveryOption):
#     def calculate(self, weight):
#         return weight * 1.2 + 5


# class ExpressDeliveryOption(DeliveryOption):
#     def calculate(self, weight):
#         return weight * 2.0 + 10


# class OvernightDeliveryOption(DeliveryOption):
#     def calculate(self, weight):
#         return weight * 3.0 + 20


# class DeliveryCalculator:
#     def calculate(self, weight, delivery_option: DeliveryOption):
#         return delivery_option.calculate(weight)


# ==============================================================================
# DELIVERY_PRICES = {
#     "standard": lambda w: w * 1.2 + 5,
#     "express": lambda w: w * 2.0 + 10,
#     "overnight": lambda w: w * 3.0 + 20,
# }


# def calculate_delivery(weight, option):
#     try:
#         return DELIVERY_PRICES[option](weight)
#     except KeyError:
#         raise ValueError("Invalid delivery option")
