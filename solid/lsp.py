# # –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è LSP (Liskov Substitution Principle)
# class Bird:
#     def fly(self):
#         print("Flying!")


# class Duck(Bird):
#     pass


# class Penguin(Bird):
#     def fly(self):
#         print("I can't fly!")


# def let_it_fly(bird: Bird):
#     bird.fly()


# # üî¥ –í–æ–ø—Ä–æ—Å:
# # –ù–∞—Ä—É—à–∞–µ—Ç –ª–∏ –∫—Ç–æ-—Ç–æ –ø—Ä–∏–Ω—Ü–∏–ø –õ–∏—Å–∫–æ–≤? –ï—Å–ª–∏ –¥–∞ ‚Äî –∫—Ç–æ –∏ –ø–æ—á–µ–º—É?
# # –î–∞ –Ω–∞—Ä—É—à–∞–µ—Ç...Bird —Ç.–∫ –æ–Ω —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–µ
# # –∫–ª–∞—Å—Å—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è...–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–∞–∫–æ–µ —á—Ç–æ Duck –ª–µ—Ç–∞–µ—Ç –∞ Penguin
# # –µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —á—Ç–æ –æ–¥–∏–Ω –ª–µ—Ç–∞–µ—Ç –∞ –¥—Ä—É–≥–æ–π –Ω–µ—Ç —Ö–æ—Ç—è
# # –∫–ª–∞—Å—Å Bird —è–≤–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∏ –≤—Å–µ –ø—Ç–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –ª–µ—Ç–∞—Ç—å


# # –ö–∞–∫ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∫–æ–¥, —á—Ç–æ–±—ã —Å–æ–±–ª—é–¥–∞–ª—Å—è LSP?
# # –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º OCP (Open-Closed Principle)
# from abc import ABC, abstractmethod


# class Bird:
#     def eat(self):
#         print("Pecking food")


# class FlyingBird(Bird):
#     @abstractmethod
#     def fly(self):
#         pass


# class Duck(FlyingBird):
#     def fly(self):
#         print("Flying!")


# class Penguin(Bird):
#     def swim(self):
#         print("Swimming!")


# def let_it_fly(bird: FlyingBird):
#     bird.fly()
