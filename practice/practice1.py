# ==============================================================================
# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å-—É—Ç–∏–ª–∏—Ç–∞
# ==============================================================================
# üß™ –ó–∞–¥–∞—á–∞:
# –£ —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–¥:

# class StringUtils:
#     def capitalize_words(self, text):
#         return ' '.join(word.capitalize() for word in text.split())


# class MyLogger(StringUtils):
#     def log(self, message):
#         formatted = self.capitalize_words(message)
#         print(f"[LOG] {formatted}")
# üí• –ù–∞–π–¥–∏, –≤ —á—ë–º —Ç—É—Ç –ø—Ä–æ–±–ª–µ–º–∞, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –±–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# class StringUtils:
#     @staticmethod
#     def capitalize_words(text):
#         return " ".join(word.capitalize() for word in text.split())


# class MyLogger:
#     def log(self, message):
#         formatted = StringUtils.capitalize_words(message)
#         print(f"[LOG] {formatted}")
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# ==============================================================================
# Anemic Domain Model
# ==============================================================================
# üíº –ó–∞–¥–∞—á–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –±–∞–ª–∞–Ω—Å
# –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ—Ç —Ç–∞–∫–æ–π –∫–æ–¥ ‚Äî –∫–ª–∞—Å—Å —Å —á–∏—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∏–º–∏:


# class User:
#     def __init__(self, name, balance):
#         self.name = name
#         self.balance = balance


# def withdraw(user: User, amount: float):
#     if user.balance >= amount:
#         user.balance -= amount
#     else:
#         raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")


# üìå –ó–∞–¥–∞–Ω–∏–µ:
# –ü–µ—Ä–µ–¥–µ–ª–∞–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã User —Å—Ç–∞–ª –±–æ–≥–∞—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º ‚Äî —Å–æ —Å–≤–æ–µ–π –ª–æ–≥–∏–∫–æ–π —Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ (withdraw), –±–µ–∑ –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏.
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# class User:
#     def __init__(self, name, balance):
#         self.name = name
#         self.balance = balance


#     def withdraw(self, amount: float):
#         if amount > self.balance:
#             raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
#         self.balance -= amount
# ==============================================================================
# –í—ã–∑–æ–≤ –ø—Ä–µ–¥–∫–∞
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# class Animal:
#     def __init__(self, name):
#         self.name = name
#         print(f"Animal —Å–æ–∑–¥–∞–Ω: {self.name}")


# class Dog(Animal):
#     def __init__(self, name, breed):
#         self.breed = breed
#         print(f"Dog —Å–æ–∑–¥–∞–Ω: {self.breed}")


# d = Dog("–®–∞—Ä–∏–∫", "Ovcharka")


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# class Animal:
#     def __init__(self, name):
#         self.name = name
#         print(f"Animal —Å–æ–∑–¥–∞–Ω: {self.name}")


# class Dog(Animal):
#     def __init__(self, name, breed):
#         super().__init__(name)
#         self.breed = breed
#         print(f"Dog —Å–æ–∑–¥–∞–Ω: {self.breed}")


# d = Dog("–®–∞—Ä–∏–∫", "Ovcharka")
# ==============================================================================
# –û—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ –ø–æ–¥–∫–ª–∞—Å—Å–∞
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# class Animal:
#     def __init__(self, name):
#         self.name = name

#     def speak(self):
#         return f"{self.name} –∏–∑–¥–∞—ë—Ç –∑–≤—É–∫."


# class Dog(Animal):
#     pass
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# class Animal:
#     def __init__(self, name):
#         self.name = name

#     def speak(self):
#         return f"{self.name} –∏–∑–¥–∞—ë—Ç –∑–≤—É–∫."


# class Dog(Animal):
#     def __init__(self, name):
#         super().__init__(name)


#     def speak(self):
#         return f"{self.name} –ª–∞–µ—Ç: –ì–∞–≤-–≥–∞–≤!"
# ==============================================================================
# –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# class App:
#     def __init__(self):
#         self.users = []
#         self.settings = {}
#         self.logger = []

#     def add_user(self, user):
#         self.users.append(user)

#     def log(self, message):
#         self.logger.append(message)

#     def get_setting(self, key):
#         return self.settings.get(key)

#     def set_setting(self, key, value):
#         self.settings[key] = value


#     def send_email(self, to, subject, body):
#         print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ {to}: {subject}")
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class User:
    def __init__(self):
        self.users = []

    def add_user(self, user):
        self.users.append(user)


class Logging:
    def __init__(self):
        self.logger = []

    def log(self, message):
        self.logger.append(message)


class Setting:
    def __init__(self):
        self.settings = {}

    def get_setting(self, key):
        return self.settings.get(key)

    def set_setting(self, key, value):
        self.settings[key] = value


class Email:
    @staticmethod
    def send_email(to, subject, body):
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ {to}: {subject}")


# ==============================================================================
# –û–±—ä–µ–∫—Ç–Ω–∞—è –∫–ª–æ–∞–∫–∞
# class SharedState:
#     def __init__(self):
#         self.data = {}


# class ComponentA:
#     def do_something(self, state: SharedState):
#         state.data["a"] = "something from A"


# class ComponentB:
#     def do_something(self, state: SharedState):
#         print(state.data.get("a"))
# ==============================================================================
# class SharedState:
#     def __init__(self):
#         self._data = {}

#     def set_value(self, key, value):
#         self._data[key] = value

#     def get_value(self, key):
#         return self._data.get(key)


# class ComponentA:
#     def do_something(self, state: SharedState):
#         state.set_value("a", "something from A")


# class ComponentB:
#     def do_something(self, state: SharedState):
#         value = state.get_value("a")
#         print(value)
# ==============================================================================
# –ü–æ–ª—Ç–µ—Ä–≥–µ–π—Å—Ç

# class Engine:
#     def start(self):
#         print("–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω")

# class Car:
#     def __init__(self, engine):
#         self.engine = engine

#     def start_engine(self):
#         self.engine.start()

# class CarController:
#     def __init__(self, car):
#         self.car = car


#     def start(self):
#         self.car.start_engine()
# ==============================================================================
# class Engine:
#     def start_engine(self):
#         print("–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω")


# class Car(Engine):
#     pass
# ==============================================================================
# –ü—Ä–æ–±–ª–µ–º–∞ –π–æ-–π–æ
# ==============================================================================
# class Entity:
#     def update(self):
#         print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏")


# class MovingEntity(Entity):
#     def update(self):
#         super().update()
#         print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è")


# class AnimatedMovingEntity(MovingEntity):
#     def update(self):
#         super().update()
#         print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")


# class Player(AnimatedMovingEntity):
#     def update(self):
#         super().update()
#         print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞")
# ==============================================================================
# class Entity:
#     def update(self):
#         print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏")


# class MovingEntity(Entity):
#     def update(self):
#         super().update()
#         print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è")


# class AnimatedMovingEntity(Entity):
#     def update(self):
#         super().update()
#         print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")


# class Player(Entity):
#     def update(self):
#         super().update()
#         print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞")
# ==============================================================================
# –û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ
# ==============================================================================
# class Address:
#     def __init__(self, street, city):
#         self.street = street
#         self.city = city


# class Order:
#     def __init__(self, id, total):
#         self.id = id
#         self.total = total
# ==============================================================================
# class Address:
#     def __init__(self, street, city):
#         self._street = street
#         self._city = city

#     def __str__(self):
#         return f"{self._street}, {self._city}"

#     @property
#     def street(self):
#         return self._street

#     @street.setter
#     def street(self, value):
#         self._street = value

#     @property
#     def city(self):
#         return self._city

#     @city.setter
#     def city(self, value):
#         self._city = value


# class Order:
#     def __init__(self, id, total, address: Address):
#         self._id = id
#         self._total = total
#         self._address = address


#     def __str__(self):
#         return f"Order #{self._id} ‚Äî Total: {self._total}, Ship to: {self._address}"
# ==============================================================================
# –§—Ä–µ–Ω–¥-–∑–æ–Ω–∞
# ==============================================================================
# class BankAccount:
#     def __init__(self, balance):
#         self._balance = balance


# class AccountManager:
#     def withdraw_all(self, account: BankAccount):
#         print(f"–°–Ω—è—Ç–æ {account._balance}‚ÇΩ")
#         account._balance = 0
# ==============================================================================
# class BankAccount:
#     def __init__(self, balance):
#         self._balance = balance

#     @property
#     def balance(self):
#         return self._balance

#     @balance.setter
#     def balance(self, value):
#         self._balance = value

#     def withdraw_all(self):
#         amount = self._balance
#         self._balance = 0
#         return amount


# class AccountManager:
#     def withdraw_all(self, account: BankAccount):
#         amount = account.withdraw_all()
#         print(f"–°–Ω—è—Ç–æ {amount}‚ÇΩ")
# ==============================================================================
# –ö–∞—à–∞ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
# ==============================================================================
# class Printer:
#     def print_text(self, text):
#         print(text)

#     def print_image(self, image):
#         print(f"–ü–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image}")

#     def print_pdf(self, pdf):
#         print(f"–ü–µ—á–∞—Ç—å PDF {pdf}")

#     def scan_document(self, doc):
#         print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {doc}")


#     def fax_document(self, doc):
#         print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–∫—Å–∞ {doc}")
# ==============================================================================
# class Printer:
#     @staticmethod
#     def print_text(text):
#         print(text)

#     @staticmethod
#     def print_image(image):
#         print(f"–ü–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image}")

#     @staticmethod
#     def print_pdf(pdf):
#         print(f"–ü–µ—á–∞—Ç—å PDF {pdf}")


# class Scanner:
#     @staticmethod
#     def scan_document(doc):
#         print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {doc}")


# class Faxxer:
#     @staticmethod
#     def fax_document(doc):
#         print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–∫—Å–∞ {doc}")
# ==============================================================================
# –í–∏—Å—è—â–∏–µ –∫–æ–Ω—Ü—ã
# ==============================================================================
# class UserManager:
#     def __init__(self):
#         self.users = []

#     def add_user(self, user):
#         self.users.append(user)

#     def remove_user(self, user):
#         self.users.remove(user)


#     def deactivate_user(self, user):
#         # ??? –¢—É—Ç –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
#         pass
# ==============================================================================
# class UserManager:
#     def __init__(self):
#         self.users = []

#     def add_user(self, user):
#         self.users.append(user)


#     def remove_user(self, user):
#         self.users.remove(user)
# ==============================================================================
# –ó–∞–≥–ª—É—à–∫–∞
# ==============================================================================
# class PaymentProcessor:
#     def process_payment(self, amount):
#         # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥
#         pass
# ==============================================================================
# class PaymentProcessor:
#     def process_payment(self, amount):
#         return f"–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {amount} –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)"
# ==============================================================================
