# Хорошо, начнем с простых задач, а затем усложним их. После выполнения задач я проверю их, чтобы убедиться, что ты хорошо понимаешь тему.

# Задачи:
# Задача 1: Базовая работа с lambda
# Создай lambda-функцию, которая принимает одно число и возвращает его квадрат. Вызови эту функцию для числа 7.
""" pow_fn = lambda x: x**2
print(pow_fn(7)) """

# Задача 2: Несколько аргументов
# Напиши lambda-функцию, которая принимает два числа и возвращает их разницу. Проверь результат для чисел 15 и 8.
""" fn = lambda x, y: x - y
print(fn(15, 8)) """

# Задача 3: Сумма и умножение
# Напиши lambda-функцию, которая принимает три числа, суммирует первые два и умножает результат на третье. Проверь результат для чисел 3, 4 и 2.
""" fn = lambda x, y, z: (x + y) * z
print(fn(3, 4, 2)) """


# Задача 4: Использование lambda внутри функции
# Напиши функцию create_multiplier, которая принимает один аргумент n и возвращает lambda-функцию, умножающую переданное ей число на n. Используй эту функцию, чтобы создать умножители на 5 и 10, и проверь их работу для числа 3.
""" def create_multiplier(n):
    return lambda x: x * n
print(create_multiplier(5)(10)) """

# Задача 5: Фильтрация с помощью lambda
# У тебя есть список чисел: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. Используй lambda-функцию и метод filter, чтобы отфильтровать только четные числа.
""" nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] """
""" even_nums = list(filter(lambda x: x % 2 == 0, nums)) """
""" even_nums = lambda x: [i for i in x if i % 2 == 0] """
""" even_nums = lambda x: list(filter(lambda x: x % 2 == 0, x)) """
""" print(even_nums(nums)) """

# Задача 6: Сортировка с помощью lambda
# Дан список кортежей: [(1, 2), (3, 1), (5, 0), (2, 4)]. Отсортируй его по второму элементу каждого кортежа с использованием lambda.
""" list_tuple = [(1, 2), (3, 1), (5, 0), (2, 4)]
sorted_list_tuple = lambda x: sorted(x, key=lambda y: y[1])
print(sorted_list_tuple(list_tuple)) """

# Задача 7: Применение map
# Есть список чисел [1, 2, 3, 4, 5]. Используй lambda и функцию map, чтобы возвести все числа в квадрат. Выведи результат.
""" nums = [1, 2, 3, 4, 5]
powed_nums = lambda x: list(map(lambda y: y**2, x))
print(powed_nums(nums)) """

# Задача 8: Сложная задача
# Напиши функцию conditional_lambda, которая возвращает lambda-функцию. Эта lambda-функция должна принимать два аргумента: число x и строку operation. Если operation равно "add", возвращай x + 10, если "multiply" — x * 10, иначе — x - 10. Проверь работу функции для разных значений.
""" def conditional_lambda():
    return lambda x, operation: (
        x + 10 if operation == "add" else x * 10 if operation == "multiply" else x - 10
    )
print(conditional_lambda()(5, "multiply")) """
